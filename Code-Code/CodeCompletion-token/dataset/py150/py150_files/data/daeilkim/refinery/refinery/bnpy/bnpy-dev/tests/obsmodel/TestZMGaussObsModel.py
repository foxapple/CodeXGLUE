'''
Unit tests for ZMGaussObsModel
'''
from bnpy.data import XData
from bnpy.obsmodel import ZMGaussObsModel
import numpy as np

class TestZMGaussObsModelEM(object):
  def setUp(self):
    oDict = dict(inferType='EM', min_covar=0.0)
    compDictList = [ dict(Sigma=np.eye(2)), dict(Sigma=100*np.eye(2))]
    obsPrior = None
    self.obsM = ZMGaussObsModel.CreateWithAllComps(oDict, obsPrior, compDictList)
    self.C = 10
    XList = list()
    for k in range(self.obsM.K):
      Xcur = np.random.randn(self.C,2)
      sig = np.sqrt(self.obsM.comp[k].Sigma[0,0])
      XList.append(sig*Xcur)
    self.Data = XData(X=np.vstack(XList))   
    print self.Data.X 
    
  def test_dimension(self):
    assert self.obsM.D == 2
    
  def test_calc_local_params(self):
    # calculate the soft assignment probabilities for all data items
    # make sure that the items generated by each component
    #  are (statistically) associated with that component
    LP = self.obsM.calc_local_params(self.Data)
    lpr = LP['E_log_soft_ev']
    maxIDs = np.argmax(lpr, axis=1)
    for k in range(self.obsM.K):
      currange = range(k*self.C, (k+1)*self.C)
      matchMask = maxIDs[currange]==k
      nMatch = np.sum(matchMask)
      assert nMatch > 0.8*self.C