#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
# vim:ts=4:sw=4:softtabstop=4:smarttab:expandtab

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This package has constants and methods to fetch standard ISO defined
constant values.

languagecodes: "http://www.loc.gov/standards/iso639-2/englangn.html"

"""

import os

URLS = {
"countrycodes": "http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1-semic.txt",
"countrycodesfile": os.path.join("/", "etc", "pycopia", "iso3166-1.txt"),
"languagecodes8bit": "http://www.loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt",
}

# To read this file, please note that one line of text contains one entry.
# An alpha-3 (bibliographic) code, an alpha-3 (terminologic) code (when
# given), an alpha-2 code (when given), an English name, and a French name
# of a language are all separated by pipe (|) characters. The Line
# terminator is the LF character.

def build_iso639a(filename):
    import urllib2
    url = URLS["languagecodes8bit"]
    req = urllib2.Request(url, None)
    req.add_header("User-Agent",'Mozilla/5.0 (Pycopia)')
    req.add_header("Accept", "text/plain")
    req.add_header("Accept-Charset", "iso-8859-1,utf-8")
    req.add_header("Accept-Language", "*")
    ccf = urllib2.urlopen(req)

    outf = open(filename, "w")
    outf.write("""#!/usr/bin/python2.4
# -*- coding: utf-8 -*-
# generated by build_iso639a()

""")
    outf.write("LANGUAGECODES = {\n")

    for line in ccf.readlines():
        parts = line.split("|")
        if len(parts) != 5:
            continue
        [alpha3_bib, alpha3_term, alpha2, name_en, name_fr] = map(str.strip, parts)
        if alpha2:
            name_en = unicode(name_en, 'utf-8')
            outf.write("  %r: %r,\n" % (alpha2.lower(), name_en.capitalize()))
    outf.write("}\n\n")
    outf.close()
    ccf.close()


def build_iso3166(filename):
    """Rebuild the iso3166 (country code) module from the URL. """
    import urllib2
    outf = open(filename, "w")

    outf.write("""#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
# generated by build_iso3166()

""")
    outf.write("COUNTRYCODES = {\n")
    try:
        ccf = urllib2.urlopen(URLS["countrycodes"])
    except:
        print "Could not get country codes from %r, using local file." % (URLS["countrycodes"],)
        ccf = open(URLS["countrycodesfile"])
    ccf.readline() # eat first header line
    for line in ccf.readlines():
        vals = line.strip().split(";")
        if len(vals) != 2:
            continue
        outf.write("  %r: %r,\n" % (vals[1], vals[0]))
    outf.write("}\n\n")
    outf.close()
    ccf.close()

