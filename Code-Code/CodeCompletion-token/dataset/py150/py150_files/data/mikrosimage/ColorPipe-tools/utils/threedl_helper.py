""" 3dl (3D LUT) helpers

.. moduleauthor:: `Marie FETIVEAU <github.com/mfe>`_

"""
__version__ = "0.2"
import math
from utils.abstract_lut_helper import AbstractLUTHelper
from utils import lut_presets as presets
from utils.lut_presets import RAISE_MODE, TYPE, PresetException
from utils.lut_utils import get_bitdepth


class ThreeDLHelperException(Exception):
    """Module custom exception

    Args:
        Exception

    """
    pass

SHAPER = 'shaper'
MESH = 'mesh'


class ThreedlLutHelper(AbstractLUTHelper):
    """3dl LUT helper

    """
    @staticmethod
    def get_default_preset():
        return {
            presets.TYPE: "3D",
            presets.EXT: ".3dl",
            presets.IN_RANGE: [0, 1023],
            presets.OUT_RANGE: [0, 4095],
            presets.CUBE_SIZE: 17,
            presets.TITLE: "3dl LUT",
            presets.COMMENT: ("Generated by ColorPipe-tools, "
                              "threedl_helper {0}").format(__version__),
            presets.VERSION: "1",
            # specific parameters
            SHAPER: True,
            MESH: False
            }

    def _write_1d_2d_lut(self, process_function, file_path, preset,
                         line_function):
        message = "1D/2D  LUT is not supported in 3DL format"
        raise ThreeDLHelperException(message)

    def write_3d_lut(self, process_function, file_path, preset):
        # check ranges are int
        for str_range in [presets.IN_RANGE, presets.OUT_RANGE]:
            arange = preset[str_range]
            presets.check_range_is_int(arange,
                                       self. _get_range_message(str_range,
                                                                arange))
        # get data
        data = self._get_3d_data(process_function,
                                 preset,
                                 inverse_loops_order=True)[1]
        # get attribute
        lutfile = open(file_path, 'w+')
        cube_size = preset[presets.CUBE_SIZE]
        input_range = preset[presets.IN_RANGE]
        output_range = preset[presets.OUT_RANGE]
        # title
        lutfile.write("# {0}\n".format(preset[presets.TITLE]))
        # comment
        if preset[presets.COMMENT]:
            lutfile.write("# {0}\n".format(preset[presets.COMMENT]))
        # lut size
        lutfile.write("# Dimension {0}x{0}x{0}\n".format(cube_size))
        lutfile.write("# Input range {0}\n".format(input_range))
        lutfile.write("# Output range {0}\n".format(output_range))
        # get bit depth from ranges
        in_bit_depth = get_bitdepth(input_range[1])
        out_bit_depth = get_bitdepth(output_range[1])
        if preset[MESH]:
            # About mesh values :
            # Mesh 5 12
            # nb segments = 2^(5) + 1
            # output bit depth = 2^12
            mesh_input = int(math.log(cube_size, 2))
            lutfile.write("3DMESH\nMesh {0} {1}\n".format(mesh_input,
                                                          out_bit_depth))
        # shaper lut
        if preset[SHAPER]:
            shaper = "{0}\n".format(self.get_string_shaper_lut(cube_size,
                                                               in_bit_depth))
            lutfile.write(shaper)
        # data
        for rgb in data:
            lutfile.write(self._get_rgb_value_line(preset, rgb))
        lutfile.close()
        return self.get_export_message(file_path)

    def _get_rgb_value_line(self, preset, rgb, in_rgb=None, separator=" "):
        # 3dl layout is bgr
        return self._get_pattern(preset).format(rgb.r, rgb.g, rgb.b)

    @staticmethod
    def _get_range_message(range_name, arange):
        """ Get range warning/error message

        Returns:
            .str

        """
        return ("3dl {0} is expected to be int."
                " Ex: [0, 1023] or [0, 65535].\nYour range {1}"
                ).format(range_name, arange)

    @staticmethod
    def get_shaper_lut(cube_size, bit_depth):
        """ Return shaper lut as a list

        Args:
            cube_size (int): cube size. Ex: 17, 33...

            bit_depth (int): bit depth of shaper lut values. Ex: 10, 12, 16...

        Returns:
            .int list

        """
        max_value = float(math.pow(2, bit_depth) - 1)
        step = max_value / (cube_size - 1)
        shaper_lut = []
        for i in range(0, cube_size):
            shaper_lut.append(int(i * step))
        return shaper_lut

    @staticmethod
    def get_string_shaper_lut(cube_size, bit_depth):
        """ Return shaper lut as a string

        Args:
            cube_size (int): cube size. Ex: 17, 32...

            bit_depth (int): bit depth of the value of the shaper lut.
            Ex: 10, 12, 16...

        Returns:
            .string list

        """
        shaper_lut = ThreedlLutHelper.get_shaper_lut(cube_size, bit_depth)
        return " ".join(str(value) for value in shaper_lut)

    def _validate_preset(self, preset, mode=RAISE_MODE, default_preset=None):
        if default_preset is None:
            default_preset = ThreedlLutHelper.get_default_preset()
        # type must be 3D, there's no 1d/2d 3dl
        if presets.TYPE in preset and not preset[TYPE] == '3D':
            if mode == RAISE_MODE:
                raise PresetException(("'{0}' is not a valid type for 3dl LUT."
                                       "Choose '3D'"
                                       ).format(preset[TYPE]))
            preset[presets.TYPE] = default_preset[presets.TYPE]
        # check basic arguments
        preset = AbstractLUTHelper._validate_preset(self, preset, mode,
                                                    default_preset)
        # check shaper and mesh attributes
        specific_attr = [SHAPER, MESH]
        for attr in specific_attr:
            if attr not in preset:
                if mode == RAISE_MODE:
                    message = presets.MISSING_ATTR_MESSAGE.format(attr)
                    raise PresetException(message)
                preset[attr] = default_preset[attr]
            if not isinstance(preset[attr], bool):
                if mode == RAISE_MODE:
                    raise PresetException("{0} 3dl attribute must be a boolean"
                                          ).format(attr)
        # return updated preset
        return preset

THREEDL_HELPER = ThreedlLutHelper()
