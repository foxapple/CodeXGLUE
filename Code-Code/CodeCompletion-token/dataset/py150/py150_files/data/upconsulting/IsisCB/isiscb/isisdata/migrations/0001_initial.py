# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.db.models.deletion
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AARelation',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('type_controlled', models.CharField(blank=True, max_length=5, null=True, help_text=b'\n    Controlled term specifying the nature of the relationship\n    (the predicate between the subject and object).', choices=[(b'IDTO', b'Is Identical To'), (b'PAOF', b'Is Parent Of'), (b'PRETO', b'Happened Previous To'), (b'OFOF', b'Is Officer Of'), (b'ASWI', b'Is Associated With')])),
                ('type_free', models.CharField(help_text=b'\n    Free text description of the relationship.', max_length=255, blank=True)),
                ('modified_by', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True)),
            ],
            options={
                'verbose_name': 'authority-authority relationship',
                'verbose_name_plural': 'authority-authority relationships',
            },
        ),
        migrations.CreateModel(
            name='ACRelation',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('type_controlled', models.CharField(choices=[(b'AU', b'Author'), (b'ED', b'Editor'), (b'AD', b'Advisor'), (b'CO', b'Contributor'), (b'TR', b'Translator'), (b'SU', b'Subject'), (b'CA', b'Category'), (b'PU', b'Publisher'), (b'SC', b'School'), (b'IN', b'Institution'), (b'ME', b'Meeting'), (b'PE', b'Periodical'), (b'BS', b'Book Series')], max_length=2, blank=True, help_text=b'\n    Used to specify the nature of the relationship between authority (as the\n    subject) and the citation (as the object) more specifically than\n    Type.Broad.controlled.', null=True, verbose_name=b'type')),
                ('type_broad_controlled', models.CharField(blank=True, help_text=b'\n    Used to specify the nature of the relationship between authority (as the\n    subject) and the citation (as the object) more broadly than\n    Type.controlled', max_length=2, verbose_name=b'type (broad)', choices=[(b'PR', b'Has Personal Responsibility For'), (b'SC', b'Provides Subject Content About'), (b'IH', b'Is Institutional Host Of'), (b'PH', b'Is Publication Host Of')])),
                ('type_free', models.CharField(help_text=b"\n    Free text description of the role that the authority plays in the\n    citation (e.g. 'introduction by', 'dissertation supervisor', etc)", max_length=255, verbose_name=b'type (free text)', blank=True)),
                ('name_for_display_in_citation', models.CharField(help_text=b"\n    Display for the authority as it is to be used when being displayed with the\n    citation. Eg. the form of the author's name as it appears on a\n    publication--say, J.E. Koval--which might be different from the name of the\n    authority--Jenifer Elizabeth Koval.", max_length=255)),
                ('confidence_measure', models.FloatField(default=1.0, help_text=b'\n    Currently not used: will be used to assess the confidence of the link in the\n    event that there is some ambiguity.\n    ', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('relationship_weight', models.FloatField(default=1.0, help_text=b'\n    Currently not used: helps to assess how significant this relationship is--to\n    be used mostly in marking subjects.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
            ],
            options={
                'verbose_name': 'authority-citation relationship',
                'verbose_name_plural': 'authority-citation relationships',
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('subject_instance_id', models.CharField(max_length=200)),
                ('subject_field', models.CharField(help_text=b'\n    The name of the field in ``subject`` to which this annotation refers. For\n    example, ``title``.', max_length=255, null=True, blank=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('child_class', models.CharField(help_text=b'\n    Name of the child model for this instance.', max_length=255, blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('description', models.TextField(help_text=b'\n    Additional information about this attribute.', blank=True)),
                ('value_freeform', models.CharField(help_text=b'\n    Non-normalized value, e.g. an approximate date, or a date range.', max_length=255, verbose_name=b'freeform value', blank=True)),
                ('source_instance_id', models.CharField(max_length=200)),
                ('type_controlled_broad', models.CharField(max_length=255, blank=True)),
                ('type_free', models.CharField(max_length=255, blank=True)),
                ('modified_by', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True)),
                ('source_content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('value_content_type', models.ForeignKey(related_name='attribute_value', to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Authority',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(help_text=b'\n    Name, title, or other main term for the authority as will be displayed.', max_length=1000)),
                ('description', models.TextField(help_text=b'\n    A brief description that will be displayed to help identify the authority.\n    Such as, brief bio or a scope note. For classification terms will be text\n    like "Classification term from the XXX classification schema.\'', null=True, blank=True)),
                ('type_controlled', models.CharField(choices=[(b'PE', b'Person'), (b'IN', b'Institution'), (b'TI', b'Time Period'), (b'GE', b'Geographic Term'), (b'SE', b'Serial Publication'), (b'CT', b'Classification Term'), (b'CO', b'Concept'), (b'CW', b'Creative Work'), (b'EV', b'Event'), (b'CR', b'Cross-reference'), (b'PU', b'Publisher')], max_length=2, blank=True, help_text=b'\n    Specifies authority type. Each authority thema has its own list of\n    controlled type vocabulary.', null=True, verbose_name=b'type')),
                ('classification_system', models.CharField(blank=True, max_length=4, null=True, help_text=b'\n    Specifies the classification system that is the source of the authority.\n    Used to group resources by the Classification system. The system used\n    currently is the Weldon System. All the other ones are for reference or\n    archival purposes only.', choices=[(b'SWP', b'SWP'), (b'NEU', b'Neu'), (b'MW', b'MW'), (b'SHOT', b'SHOT')])),
                ('classification_code', models.CharField(help_text=b'\n    alphanumeric code used in previous classification systems to describe\n    classification terms. Primarily of historical interest only. Used primarily\n    for Codes for the classificationTerms. however, can be used for other\n    kinds of terms as appropriate.', max_length=255, null=True, blank=True)),
                ('classification_hierarchy', models.CharField(help_text=b'\n    Used for Classification Terms to describe where they fall in the\n    hierarchy.', max_length=255, null=True, blank=True)),
                ('record_status', models.CharField(blank=True, max_length=2, null=True, choices=[(b'AC', b'Active'), (b'DU', b'Duplicate'), (b'RD', b'Redirect')])),
            ],
            options={
                'verbose_name': 'authority record',
                'verbose_name_plural': 'authority records',
            },
        ),
        migrations.CreateModel(
            name='CCRelation',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('type_controlled', models.CharField(blank=True, max_length=3, null=True, help_text=b'\n    Type of relationship between two citation records.', choices=[(b'IC', b'Includes Chapter'), (b'ISA', b'Includes Series Article'), (b'RO', b'Is Review Of'), (b'RE', b'Responds To'), (b'AS', b'Is Associated With'), (b'RB', b'Is Reviewed By')])),
                ('type_free', models.CharField(help_text=b'\n    Type of relationship as used in the citation.', max_length=255, blank=True)),
                ('modified_by', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True)),
            ],
            options={
                'verbose_name': 'citation-citation relationship',
                'verbose_name_plural': 'citation-citation relationships',
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('title', models.CharField(help_text=b'\n    The name to be used to identify the resource. For reviews that traditionally\n    have no title, this should be added as something like "[Review of Title\n    (Year) by Author]".', max_length=2000, blank=True)),
                ('description', models.TextField(help_text=b"\n    Used for additional bibliographic description, such as content summary. For\n    abstracts use the 'Abstract' field.", null=True, blank=True)),
                ('type_controlled', models.CharField(choices=[(b'BO', b'Book'), (b'AR', b'Article'), (b'CH', b'Chapter'), (b'RE', b'Review'), (b'ES', b'Essay Review'), (b'TH', b'Thesis'), (b'EV', b'Event'), (b'PR', b'Presentation'), (b'IN', b'Interactive Resource'), (b'WE', b'Website'), (b'AP', b'Application')], max_length=2, blank=True, help_text=b'\n    This list can be extended to the resource types specified by Doublin Core\n    Recource Types http://dublincore.org/documents/resource-typelist/', null=True, verbose_name=b'type')),
                ('abstract', models.TextField(help_text=b'\n    Abstract or detailed summaries of a work.', blank=True)),
                ('edition_details', models.TextField(help_text=b'\n    Use for describing the edition or version of the resource. Include names of\n    additional contributors if necessary for clarification (such as translators,\n    introduction by, etc). Always, use relationship table to list contributors\n    (even if they are specified here).', blank=True)),
                ('physical_details', models.CharField(help_text=b'\n    For describing the physical description of the resource. Use whatever\n    information is appropriate for the type of resource.', max_length=255, blank=True)),
                ('record_action', models.CharField(blank=True, help_text=b'\n    Used to track the record through curation process.\n    ', max_length=2, choices=[(b'EX', b'External Proof'), (b'QU', b'Query Proof'), (b'HO', b'Hold'), (b'RC', b'RLG Correct')])),
                ('status_of_record', models.CharField(blank=True, help_text=b'\n    Used to control printing in the paper volume of the CB.\n    ', max_length=2, choices=[(b'CL', b'Content List'), (b'SB', b'Source Book'), (b'SC', b'Scope'), (b'FX', b'Fix Record'), (b'DP', b'Duplicate'), (b'DL', b'Delete'), (b'RL', b'Isis RLG')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalACRelation',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('type_controlled', models.CharField(choices=[(b'AU', b'Author'), (b'ED', b'Editor'), (b'AD', b'Advisor'), (b'CO', b'Contributor'), (b'TR', b'Translator'), (b'SU', b'Subject'), (b'CA', b'Category'), (b'PU', b'Publisher'), (b'SC', b'School'), (b'IN', b'Institution'), (b'ME', b'Meeting'), (b'PE', b'Periodical'), (b'BS', b'Book Series')], max_length=2, blank=True, help_text=b'\n    Used to specify the nature of the relationship between authority (as the\n    subject) and the citation (as the object) more specifically than\n    Type.Broad.controlled.', null=True, verbose_name=b'type')),
                ('type_broad_controlled', models.CharField(blank=True, help_text=b'\n    Used to specify the nature of the relationship between authority (as the\n    subject) and the citation (as the object) more broadly than\n    Type.controlled', max_length=2, verbose_name=b'type (broad)', choices=[(b'PR', b'Has Personal Responsibility For'), (b'SC', b'Provides Subject Content About'), (b'IH', b'Is Institutional Host Of'), (b'PH', b'Is Publication Host Of')])),
                ('type_free', models.CharField(help_text=b"\n    Free text description of the role that the authority plays in the\n    citation (e.g. 'introduction by', 'dissertation supervisor', etc)", max_length=255, verbose_name=b'type (free text)', blank=True)),
                ('name_for_display_in_citation', models.CharField(help_text=b"\n    Display for the authority as it is to be used when being displayed with the\n    citation. Eg. the form of the author's name as it appears on a\n    publication--say, J.E. Koval--which might be different from the name of the\n    authority--Jenifer Elizabeth Koval.", max_length=255)),
                ('confidence_measure', models.FloatField(default=1.0, help_text=b'\n    Currently not used: will be used to assess the confidence of the link in the\n    event that there is some ambiguity.\n    ', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('relationship_weight', models.FloatField(default=1.0, help_text=b'\n    Currently not used: helps to assess how significant this relationship is--to\n    be used mostly in marking subjects.', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical authority-citation relationship',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAttribute',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('description', models.TextField(help_text=b'\n    Additional information about this attribute.', blank=True)),
                ('value_freeform', models.CharField(help_text=b'\n    Non-normalized value, e.g. an approximate date, or a date range.', max_length=255, verbose_name=b'freeform value', blank=True)),
                ('source_instance_id', models.CharField(max_length=200)),
                ('type_controlled_broad', models.CharField(max_length=255, blank=True)),
                ('type_free', models.CharField(max_length=255, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('source_content_type', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='contenttypes.ContentType', null=True)),
                ('type_controlled', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.AttributeType', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical attribute',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAuthority',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(help_text=b'\n    Name, title, or other main term for the authority as will be displayed.', max_length=1000)),
                ('description', models.TextField(help_text=b'\n    A brief description that will be displayed to help identify the authority.\n    Such as, brief bio or a scope note. For classification terms will be text\n    like "Classification term from the XXX classification schema.\'', null=True, blank=True)),
                ('type_controlled', models.CharField(choices=[(b'PE', b'Person'), (b'IN', b'Institution'), (b'TI', b'Time Period'), (b'GE', b'Geographic Term'), (b'SE', b'Serial Publication'), (b'CT', b'Classification Term'), (b'CO', b'Concept'), (b'CW', b'Creative Work'), (b'EV', b'Event'), (b'CR', b'Cross-reference'), (b'PU', b'Publisher')], max_length=2, blank=True, help_text=b'\n    Specifies authority type. Each authority thema has its own list of\n    controlled type vocabulary.', null=True, verbose_name=b'type')),
                ('classification_system', models.CharField(blank=True, max_length=4, null=True, help_text=b'\n    Specifies the classification system that is the source of the authority.\n    Used to group resources by the Classification system. The system used\n    currently is the Weldon System. All the other ones are for reference or\n    archival purposes only.', choices=[(b'SWP', b'SWP'), (b'NEU', b'Neu'), (b'MW', b'MW'), (b'SHOT', b'SHOT')])),
                ('classification_code', models.CharField(help_text=b'\n    alphanumeric code used in previous classification systems to describe\n    classification terms. Primarily of historical interest only. Used primarily\n    for Codes for the classificationTerms. however, can be used for other\n    kinds of terms as appropriate.', max_length=255, null=True, blank=True)),
                ('classification_hierarchy', models.CharField(help_text=b'\n    Used for Classification Terms to describe where they fall in the\n    hierarchy.', max_length=255, null=True, blank=True)),
                ('record_status', models.CharField(blank=True, max_length=2, null=True, choices=[(b'AC', b'Active'), (b'DU', b'Duplicate'), (b'RD', b'Redirect')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical authority record',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCCRelation',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('description', models.TextField(blank=True)),
                ('type_controlled', models.CharField(blank=True, max_length=3, null=True, help_text=b'\n    Type of relationship between two citation records.', choices=[(b'IC', b'Includes Chapter'), (b'ISA', b'Includes Series Article'), (b'RO', b'Is Review Of'), (b'RE', b'Responds To'), (b'AS', b'Is Associated With'), (b'RB', b'Is Reviewed By')])),
                ('type_free', models.CharField(help_text=b'\n    Type of relationship as used in the citation.', max_length=255, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('object', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.Citation', null=True)),
                ('subject', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.Citation', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical citation-citation relationship',
            },
        ),
        migrations.CreateModel(
            name='HistoricalCitation',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('title', models.CharField(help_text=b'\n    The name to be used to identify the resource. For reviews that traditionally\n    have no title, this should be added as something like "[Review of Title\n    (Year) by Author]".', max_length=2000, blank=True)),
                ('description', models.TextField(help_text=b"\n    Used for additional bibliographic description, such as content summary. For\n    abstracts use the 'Abstract' field.", null=True, blank=True)),
                ('type_controlled', models.CharField(choices=[(b'BO', b'Book'), (b'AR', b'Article'), (b'CH', b'Chapter'), (b'RE', b'Review'), (b'ES', b'Essay Review'), (b'TH', b'Thesis'), (b'EV', b'Event'), (b'PR', b'Presentation'), (b'IN', b'Interactive Resource'), (b'WE', b'Website'), (b'AP', b'Application')], max_length=2, blank=True, help_text=b'\n    This list can be extended to the resource types specified by Doublin Core\n    Recource Types http://dublincore.org/documents/resource-typelist/', null=True, verbose_name=b'type')),
                ('abstract', models.TextField(help_text=b'\n    Abstract or detailed summaries of a work.', blank=True)),
                ('edition_details', models.TextField(help_text=b'\n    Use for describing the edition or version of the resource. Include names of\n    additional contributors if necessary for clarification (such as translators,\n    introduction by, etc). Always, use relationship table to list contributors\n    (even if they are specified here).', blank=True)),
                ('physical_details', models.CharField(help_text=b'\n    For describing the physical description of the resource. Use whatever\n    information is appropriate for the type of resource.', max_length=255, blank=True)),
                ('record_action', models.CharField(blank=True, help_text=b'\n    Used to track the record through curation process.\n    ', max_length=2, choices=[(b'EX', b'External Proof'), (b'QU', b'Query Proof'), (b'HO', b'Hold'), (b'RC', b'RLG Correct')])),
                ('status_of_record', models.CharField(blank=True, help_text=b'\n    Used to control printing in the paper volume of the CB.\n    ', max_length=2, choices=[(b'CL', b'Content List'), (b'SB', b'Source Book'), (b'SC', b'Scope'), (b'FX', b'Fix Record'), (b'DP', b'Duplicate'), (b'DL', b'Delete'), (b'RL', b'Isis RLG')])),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical citation',
            },
        ),
        migrations.CreateModel(
            name='HistoricalLinkedData',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('universal_resource_name', models.CharField(help_text=b'\n    The value of the identifier (the actual DOI link or the value of the ISBN,\n    etc). Will be a URN, URI, URL, or other unique identifier for a work, used\n    as needed to provide information about how to find the digital object on the\n    web or to identify the physical object uniquely.', max_length=255)),
                ('subject_instance_id', models.CharField(max_length=200)),
                ('type_controlled_broad', models.CharField(max_length=255, blank=True)),
                ('type_free', models.CharField(max_length=255, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('subject_content_type', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='contenttypes.ContentType', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical linked data entry',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPerson',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('name', models.CharField(help_text=b'\n    Name, title, or other main term for the authority as will be displayed.', max_length=1000)),
                ('description', models.TextField(help_text=b'\n    A brief description that will be displayed to help identify the authority.\n    Such as, brief bio or a scope note. For classification terms will be text\n    like "Classification term from the XXX classification schema.\'', null=True, blank=True)),
                ('type_controlled', models.CharField(choices=[(b'PE', b'Person'), (b'IN', b'Institution'), (b'TI', b'Time Period'), (b'GE', b'Geographic Term'), (b'SE', b'Serial Publication'), (b'CT', b'Classification Term'), (b'CO', b'Concept'), (b'CW', b'Creative Work'), (b'EV', b'Event'), (b'CR', b'Cross-reference'), (b'PU', b'Publisher')], max_length=2, blank=True, help_text=b'\n    Specifies authority type. Each authority thema has its own list of\n    controlled type vocabulary.', null=True, verbose_name=b'type')),
                ('classification_system', models.CharField(blank=True, max_length=4, null=True, help_text=b'\n    Specifies the classification system that is the source of the authority.\n    Used to group resources by the Classification system. The system used\n    currently is the Weldon System. All the other ones are for reference or\n    archival purposes only.', choices=[(b'SWP', b'SWP'), (b'NEU', b'Neu'), (b'MW', b'MW'), (b'SHOT', b'SHOT')])),
                ('classification_code', models.CharField(help_text=b'\n    alphanumeric code used in previous classification systems to describe\n    classification terms. Primarily of historical interest only. Used primarily\n    for Codes for the classificationTerms. however, can be used for other\n    kinds of terms as appropriate.', max_length=255, null=True, blank=True)),
                ('classification_hierarchy', models.CharField(help_text=b'\n    Used for Classification Terms to describe where they fall in the\n    hierarchy.', max_length=255, null=True, blank=True)),
                ('record_status', models.CharField(blank=True, max_length=2, null=True, choices=[(b'AC', b'Active'), (b'DU', b'Duplicate'), (b'RD', b'Redirect')])),
                ('personal_name_last', models.CharField(max_length=255)),
                ('personal_name_first', models.CharField(max_length=255)),
                ('personal_name_suffix', models.CharField(max_length=255, blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical person',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTracking',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', null=True, editable=False, blank=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, db_index=True)),
                ('uri', models.URLField(blank=True)),
                ('tracking_info', models.CharField(max_length=255, blank=True)),
                ('type_controlled', models.CharField(blank=True, max_length=2, null=True, choices=[(b'HS', b'HSTM Upload'), (b'PT', b'Printed'), (b'AU', b'Authorized'), (b'PD', b'Proofed'), (b'FU', b'Fully Entered')])),
                ('subject_instance_id', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(serialize=False, primary_key=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(max_length=1, choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')])),
                ('history_user', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True)),
                ('modified_by', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('subject_content_type', models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='contenttypes.ContentType', null=True)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical tracking',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.CharField(help_text=b'Language code (e.g. ``en``).', max_length=2, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='LinkedData',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('universal_resource_name', models.CharField(help_text=b'\n    The value of the identifier (the actual DOI link or the value of the ISBN,\n    etc). Will be a URN, URI, URL, or other unique identifier for a work, used\n    as needed to provide information about how to find the digital object on the\n    web or to identify the physical object uniquely.', max_length=255)),
                ('subject_instance_id', models.CharField(max_length=200)),
                ('type_controlled_broad', models.CharField(max_length=255, blank=True)),
                ('type_free', models.CharField(max_length=255, blank=True)),
                ('modified_by', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True)),
                ('subject_content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'linked data entry',
                'verbose_name_plural': 'linked data entries',
            },
        ),
        migrations.CreateModel(
            name='LinkedDataType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('pattern', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'verbose_name': 'linked data type',
                'verbose_name_plural': 'linked data types',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('latitude', models.FloatField()),
                ('latitude_direction', models.CharField(max_length=1, choices=[(b'N', b'North'), (b'S', b'South')])),
                ('longitude', models.FloatField()),
                ('longitude_direction', models.CharField(max_length=1, choices=[(b'E', b'East'), (b'W', b'West')])),
            ],
        ),
        migrations.CreateModel(
            name='LocationSchema',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='PartDetails',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('volume', models.CharField(max_length=255, blank=True)),
                ('volume_free_text', models.CharField(max_length=255, blank=True)),
                ('volume_begin', models.IntegerField(null=True, blank=True)),
                ('volume_end', models.IntegerField(null=True, blank=True)),
                ('issue_free_text', models.CharField(max_length=255, blank=True)),
                ('issue_begin', models.IntegerField(null=True, blank=True)),
                ('issue_end', models.IntegerField(null=True, blank=True)),
                ('pages_free_text', models.CharField(max_length=255, blank=True)),
                ('page_begin', models.IntegerField(null=True, blank=True)),
                ('page_end', models.IntegerField(null=True, blank=True)),
                ('sort_order', models.IntegerField(default=0, help_text=b'\n    New field: provides a sort order for works that are part of a larger work.\n    ')),
            ],
            options={
                'verbose_name': 'part detail',
                'verbose_name_plural': 'part details',
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('gis_location', models.ForeignKey(blank=True, to='isisdata.Location', null=True)),
                ('gis_schema', models.ForeignKey(blank=True, to='isisdata.LocationSchema', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('value', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaggingSchema',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(related_name='tagging_schemas', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tracking',
            fields=[
                ('administrator_notes', models.TextField(help_text=b'\n    Curatorial discussion about the record.', null=True, blank=True)),
                ('record_history', models.TextField(help_text=b"\n    Notes about the provenance of the information in this record. e.g. 'supplied\n    by the author,' 'imported from SHOT bibliography,' 'generated by crawling UC\n    Press website'", null=True, blank=True)),
                ('modified_on', models.DateTimeField(help_text=b'\n    Date and time at which this object was last updated.', auto_now=True, null=True)),
                ('created_on_fm', models.DateTimeField(help_text=b'\n    Value of CreatedOn from the original FM database.', null=True)),
                ('created_by_fm', models.CharField(help_text=b'\n    Value of CreatedBy from the original FM database.', max_length=255, null=True, blank=True)),
                ('modified_on_fm', models.DateTimeField(help_text=b'\n    Value of ModifiedBy from the original FM database.', null=True, verbose_name=b'modified on (FM)')),
                ('modified_by_fm', models.CharField(help_text=b'\n    Value of ModifiedOn from the original FM database.', max_length=255, verbose_name=b'modified by (FM)', blank=True)),
                ('id', models.CharField(help_text=b'\n    In the format {PRE}{ZEROS}{NN}, where PRE is a three-letter prefix\n    indicating the record type (e.g. CBA for Authority), NN is an integer,\n    and ZEROS is 0-9 zeros to pad NN such that ZEROS+NN is nine characters\n    in length.', max_length=200, serialize=False, primary_key=True)),
                ('uri', models.URLField(blank=True)),
                ('tracking_info', models.CharField(max_length=255, blank=True)),
                ('type_controlled', models.CharField(blank=True, max_length=2, null=True, choices=[(b'HS', b'HSTM Upload'), (b'PT', b'Printed'), (b'AU', b'Authorized'), (b'PD', b'Proofed'), (b'FU', b'Fully Entered')])),
                ('subject_instance_id', models.CharField(max_length=200)),
                ('notes', models.TextField(blank=True)),
                ('modified_by', models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True)),
                ('subject_content_type', models.ForeignKey(to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('child_class', models.CharField(help_text=b'\n    Name of the child model for this instance.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CharValue',
            fields=[
                ('value_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Value')),
                ('value', models.CharField(max_length=2000)),
            ],
            options={
                'verbose_name': 'text (short)',
            },
            bases=('isisdata.value',),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('annotation_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Annotation')),
                ('text', models.TextField()),
            ],
            bases=('isisdata.annotation',),
        ),
        migrations.CreateModel(
            name='DateTimeValue',
            fields=[
                ('value_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Value')),
                ('value', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'date and time',
            },
            bases=('isisdata.value',),
        ),
        migrations.CreateModel(
            name='DateValue',
            fields=[
                ('value_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Value')),
                ('value', models.DateField()),
            ],
            options={
                'verbose_name': 'date',
            },
            bases=('isisdata.value',),
        ),
        migrations.CreateModel(
            name='FloatValue',
            fields=[
                ('value_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Value')),
                ('value', models.FloatField()),
            ],
            options={
                'verbose_name': 'floating point number',
            },
            bases=('isisdata.value',),
        ),
        migrations.CreateModel(
            name='IntValue',
            fields=[
                ('value_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Value')),
                ('value', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'integer',
            },
            bases=('isisdata.value',),
        ),
        migrations.CreateModel(
            name='LocationValue',
            fields=[
                ('value_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Value')),
                ('value', models.ForeignKey(to='isisdata.Location')),
            ],
            options={
                'verbose_name': 'location',
            },
            bases=('isisdata.value',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('authority_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Authority')),
                ('personal_name_last', models.CharField(max_length=255)),
                ('personal_name_first', models.CharField(max_length=255)),
                ('personal_name_suffix', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('isisdata.authority',),
        ),
        migrations.CreateModel(
            name='TagAppellation',
            fields=[
                ('annotation_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Annotation')),
            ],
            bases=('isisdata.annotation',),
        ),
        migrations.CreateModel(
            name='TextValue',
            fields=[
                ('value_ptr', models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False, to='isisdata.Value')),
                ('value', models.TextField()),
            ],
            options={
                'verbose_name': 'text (long)',
            },
            bases=('isisdata.value',),
        ),
        migrations.AddField(
            model_name='value',
            name='attribute',
            field=models.OneToOneField(related_name='value', to='isisdata.Attribute'),
        ),
        migrations.AddField(
            model_name='tag',
            name='schema',
            field=models.ForeignKey(related_name='tags', to='isisdata.TaggingSchema'),
        ),
        migrations.AddField(
            model_name='linkeddata',
            name='type_controlled',
            field=models.ForeignKey(verbose_name=b'type', to='isisdata.LinkedDataType', help_text=b'\n    The "type" field determines what kinds of values are acceptable for this\n    linked data entry.'),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='authority_ptr',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.Authority', null=True),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='modified_by',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalperson',
            name='redirect_to',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.Authority', null=True),
        ),
        migrations.AddField(
            model_name='historicallinkeddata',
            name='type_controlled',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.LinkedDataType', null=True),
        ),
        migrations.AddField(
            model_name='historicalcitation',
            name='part_details',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.PartDetails', null=True),
        ),
        migrations.AddField(
            model_name='historicalauthority',
            name='redirect_to',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.Authority', null=True),
        ),
        migrations.AddField(
            model_name='historicalacrelation',
            name='authority',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.Authority', null=True),
        ),
        migrations.AddField(
            model_name='historicalacrelation',
            name='citation',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to='isisdata.Citation', null=True),
        ),
        migrations.AddField(
            model_name='historicalacrelation',
            name='history_user',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='historicalacrelation',
            name='modified_by',
            field=models.ForeignKey(related_name='+', on_delete=django.db.models.deletion.DO_NOTHING, db_constraint=False, blank=True, to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='citation',
            name='language',
            field=models.ManyToManyField(help_text=b'\n    Language of the resource. Multiple languages can be specified.', to='isisdata.Language'),
        ),
        migrations.AddField(
            model_name='citation',
            name='modified_by',
            field=models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True),
        ),
        migrations.AddField(
            model_name='citation',
            name='part_details',
            field=models.OneToOneField(null=True, blank=True, to='isisdata.PartDetails', help_text=b'\n    New field: contains volume, issue, page information for works that are parts\n    of larger works.'),
        ),
        migrations.AddField(
            model_name='citation',
            name='related_authorities',
            field=models.ManyToManyField(related_name='authorities_related', through='isisdata.ACRelation', to='isisdata.Authority'),
        ),
        migrations.AddField(
            model_name='citation',
            name='related_citations',
            field=models.ManyToManyField(related_name='citations_related', through='isisdata.CCRelation', to='isisdata.Citation'),
        ),
        migrations.AddField(
            model_name='ccrelation',
            name='object',
            field=models.ForeignKey(related_name='relations_to', to='isisdata.Citation'),
        ),
        migrations.AddField(
            model_name='ccrelation',
            name='subject',
            field=models.ForeignKey(related_name='relations_from', to='isisdata.Citation'),
        ),
        migrations.AddField(
            model_name='authority',
            name='modified_by',
            field=models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True),
        ),
        migrations.AddField(
            model_name='authority',
            name='redirect_to',
            field=models.ForeignKey(blank=True, to='isisdata.Authority', null=True),
        ),
        migrations.AddField(
            model_name='attribute',
            name='type_controlled',
            field=models.ForeignKey(verbose_name=b'type', to='isisdata.AttributeType', help_text=b'\n    The "type" field determines what kinds of values are acceptable for this\n    attribute.'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='created_by',
            field=models.ForeignKey(related_name='annotations', to=settings.AUTH_USER_MODEL, null=True),
        ),
        migrations.AddField(
            model_name='annotation',
            name='subject_content_type',
            field=models.ForeignKey(to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='acrelation',
            name='authority',
            field=models.ForeignKey(to='isisdata.Authority'),
        ),
        migrations.AddField(
            model_name='acrelation',
            name='citation',
            field=models.ForeignKey(to='isisdata.Citation'),
        ),
        migrations.AddField(
            model_name='acrelation',
            name='modified_by',
            field=models.ForeignKey(blank=True, to=settings.AUTH_USER_MODEL, help_text=b'\n    The most recent user to modify this object.', null=True),
        ),
        migrations.AddField(
            model_name='aarelation',
            name='object',
            field=models.ForeignKey(related_name='relations_to', to='isisdata.Authority'),
        ),
        migrations.AddField(
            model_name='aarelation',
            name='subject',
            field=models.ForeignKey(related_name='relations_from', to='isisdata.Authority'),
        ),
        migrations.AddField(
            model_name='tagappellation',
            name='tag',
            field=models.ForeignKey(to='isisdata.Tag'),
        ),
    ]
