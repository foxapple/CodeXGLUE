#!/usr/bin/env python
'''This script grabs the currently registered IANA link relations and
TLDs from iana.org

'''

from __future__ import print_function
from __future__ import unicode_literals

import re
import sys
import codecs

# we want to write in utf-8 in this script
sys.stdout = codecs.getwriter('utf8')(sys.stdout)

import requests
try:
    from lxml import objectify
except ImportError:
    print("This script shouldn't need to be run by end users. But if you "
          "need to run it, you should install lxml first.")
import datetime


def linewrap(chunks, width=None, sep=' ', preamble='', line_prefix=''):
    r'''Takes an iterator of strings, and attempts to wrap them in whole chunks
    to fit within width. Takes an optional preamble which is prepended before
    the first line, and an optional per-line prefix (which is appended to every
    line but the first). If return_gen is true, this function returns a
    generator that will produce the lines of output as needed, otherwise it
    returns a single joined string'''
    sep_len = len(sep)

    if isinstance(chunks, basestring):
        chunks = chunks.split()
    if preamble:
        chunks[0] = preamble + chunks[0]

    def line_len(line):
        r'Gets the full length of a line passed a list of strings'
        word_len = sum(len(l) for l in line)
        seps_len = sep_len * (len(line) - 1)
        return word_len + seps_len if seps_len >= 0 else 0

    def gen():
        r'The generator to incrementally create lines from the input'
        sep_len = len(sep)
        line = []
        for chunk in chunks:
            if line_len(line) + len(chunk) + sep_len > width:
                yield sep.join(line)
                line = [line_prefix + chunk]
            else:
                line.append(chunk)
        if line:
            yield sep.join(line)

    return gen()

def emit_iana_rels(rels_url):
    '''Fetches the IANA link relation registry'''
    text = requests.get(rels_url).text.encode('ascii', 'ignore')
    xml = objectify.fromstring(text)
    iana_rels = {str(rec.value): str(rec.description)
                 for rec in xml.registry.record}
    keys = sorted(iana_rels)
    print('# IANA link relation registry last updated on:', xml.updated)
    print('# Obtained from', rels_url)
    print()
    print('iana_rels = {')
    for key in keys:
        print('    {0!r}: ('.format(key))
        desc_list = list(linewrap(iana_rels[key], width=68))
        for i, line in enumerate(desc_list):
            line_ = line.replace('"', '\\"')  # escape double quotes
            if i < len(desc_list) - 1:
                print('        "{0} "'.format(line_))
            else:
                print('        "{0}"'.format(line_))
        print('    ),')
    print('}')

def emit_iana_tlds(tlds_url):
    lines = requests.get(tlds_url).text.splitlines()
    regex = re.compile('Version (?P<year>\d{4})(?P<month>\d{2})(?P<day>\d{2})')
    pieces = re.search(regex, lines.pop(0)).groupdict()

    print('# Obtained from', tlds_url)
    print('# TLDs last updated: {year}-{month}-{day}\n'.format(**pieces))

    def fixup(tld):
        if tld.startswith('XN--'):
            ret = tld.encode('ascii')[4:].decode('punycode')
        else:
            ret = tld.lower()
        return "'{}'".format(ret)
    print('\n'.join(linewrap(map(fixup, lines),
                             width=75,
                             line_prefix='    ',
                             preamble='tlds = set([',
                             sep=', ')), end='])\n')

def emit_preamble():
    print('# -*- coding: utf-8 -*-')
    print('from __future__ import unicode_literals')
    print('# This file was autogenerated by', __file__)
    print()
    print('# This file generated on:', datetime.date.today())
    print()

def main():
    # location where registry is stored in xml format
    rels_url = ('http://www.iana.org/assignments/link-relations/'
                'link-relations.xml')
    tlds_url = 'http://data.iana.org/TLD/tlds-alpha-by-domain.txt'

    emit_preamble()
    emit_iana_rels(rels_url)
    print()
    print()
    emit_iana_tlds(tlds_url)


if __name__ == '__main__':
    main()
