from __future__ import print_function, unicode_literals
"""Add data required for analytics

Revision ID: 31ded1f6ad6
Revises: f1ce7950ae8
Create Date: 2014-01-27 19:33:24.306250

"""

# revision identifiers, used by Alembic.
revision = '31ded1f6ad6'
down_revision = 'f1ce7950ae8'

from alembic import op
import sqlalchemy as sa
import sqlalchemy.sql as sql

metadata = sa.MetaData()
uue = sa.Table('UserUsedExperiment', metadata,
    sa.Column('id', sa.Integer()),
    sa.Column('start_date', sa.DateTime()),
    sa.Column('start_date_micro', sa.Integer()),
    sa.Column('end_date', sa.DateTime()),
    sa.Column('end_date_micro', sa.Integer()),
    # New fields
    sa.Column('start_date_date', sa.Date()),
    sa.Column('start_date_weekday', sa.Integer()),
    sa.Column('start_date_hour', sa.Integer()),
    sa.Column('session_time_micro', sa.Integer()),
    sa.Column('session_time_seconds', sa.Integer()),
)

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column(u'UserUsedExperiment', sa.Column('start_date_date', sa.Date(), nullable=True))
    op.add_column(u'UserUsedExperiment', sa.Column('start_date_weekday', sa.Integer(), nullable=True))
    op.add_column(u'UserUsedExperiment', sa.Column('start_date_hour', sa.Integer(), nullable=True))
    op.add_column(u'UserUsedExperiment', sa.Column('session_time_micro', sa.BigInteger(), nullable=True))
    op.add_column(u'UserUsedExperiment', sa.Column('session_time_seconds', sa.Integer(), nullable=True))
    ### end Alembic commands ###

    op.create_index(u'idx_UserUsedExperiment_start_date_date', u'UserUsedExperiment', ['start_date_date',   ])
    op.create_index(u'idx_UserUsedExperiment_start_date_weekday', u'UserUsedExperiment', ['start_date_weekday',])
    op.create_index(u'idx_UserUsedExperiment_session_time_micro', u'UserUsedExperiment', ['session_time_micro',])
    op.create_index(u'idx_UserUsedExperiment_start_date_hour', u'UserUsedExperiment', ['start_date_hour',   ])

    op.create_index(u'idx_UserUsedExperiment_timetable',       u'UserUsedExperiment', ['start_date_weekday', 'start_date_hour'])
    op.create_index(u'idx_UserUsedExperiment_user_experiment', u'UserUsedExperiment', ['user_id', 'experiment_id'])
    op.create_index(u'idx_UserUsedExperiment_user_origin',     u'UserUsedExperiment', ['user_id', 'origin'])

    op.create_index('idx_UserUsedExperiment_user_group_permission_id', u'UserUsedExperiment', ['user_id', 'group_permission_id'])
    op.create_index('idx_UserUsedExperiment_user_user_permission_id', u'UserUsedExperiment', ['user_id', 'user_permission_id'])
    op.create_index('idx_UserUsedExperiment_user_role_permission_id', u'UserUsedExperiment', ['user_id', 'role_permission_id'])

    op.create_index(u'idx_UserUsedExperiment_experiment_id_group_id',       u'UserUsedExperiment', ['experiment_id', 'group_permission_id'])
    op.create_index(u'idx_UserUsedExperiment_experiment_id_user_id',        u'UserUsedExperiment', ['experiment_id', 'user_permission_id'])
    op.create_index(u'idx_UserUsedExperiment_experiment_id_permission_id',  u'UserUsedExperiment', ['experiment_id', 'role_permission_id'])

    s = sql.select([
                uue.c.id, uue.c.start_date, uue.c.start_date_micro,
                uue.c.end_date, uue.c.end_date_micro
                ]).order_by(uue.c.id)

    for use in op.get_bind().execute(s):
        use_id     = use[uue.c.id]
        start_date = use[uue.c.start_date].replace(microsecond = use[uue.c.start_date_micro])
        end_date_col = use[uue.c.end_date]

        kwargs = dict(
            start_date_date = start_date.date(),
            start_date_hour = start_date.hour,
            start_date_weekday = start_date.weekday(),
        )

        if end_date_col:
            end_date   = end_date_col.replace(microsecond = use[uue.c.end_date_micro])
            session_time_micro = (end_date - start_date).seconds * 1e6 + (end_date - start_date).microseconds
            session_time_seconds = session_time_micro / 1000000
            kwargs.update(dict(
                session_time_micro = session_time_micro,
                session_time_seconds = session_time_seconds
            ))

        update_stmt = uue.update().where(uue.c.id == use_id).values(**kwargs)
        op.execute(update_stmt)

        

def downgrade():
    op.drop_index(u'idx_UserUsedExperiment_user_experiment', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_user_origin', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_experiment_id_group_id', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_experiment_id_user_id', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_experiment_id_permission_id', 'UserUsedExperiment')

    op.drop_index('idx_UserUsedExperiment_user_group_permission_id','UserUsedExperiment')
    op.drop_index('idx_UserUsedExperiment_user_user_permission_id', 'UserUsedExperiment')
    op.drop_index('idx_UserUsedExperiment_user_role_permission_id', 'UserUsedExperiment')

    op.drop_index(u'idx_UserUsedExperiment_timetable', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_start_date_date', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_start_date_weekday', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_session_time_micro', 'UserUsedExperiment')
    op.drop_index(u'idx_UserUsedExperiment_start_date_hour', 'UserUsedExperiment')

    ### commands auto generated by Alembic - please adjust! ###
    op.drop_column(u'UserUsedExperiment', 'start_date_hour')
    op.drop_column(u'UserUsedExperiment', 'session_time_micro')
    op.drop_column(u'UserUsedExperiment', 'start_date_weekday')
    op.drop_column(u'UserUsedExperiment', 'start_date_date')
    ### end Alembic commands ###
