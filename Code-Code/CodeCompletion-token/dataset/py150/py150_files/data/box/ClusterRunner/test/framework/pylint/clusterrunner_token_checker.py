import tokenize

from pylint.checkers import BaseChecker
from pylint.interfaces import ITokenChecker


class ClusterRunnerTokenChecker(BaseChecker):
    """
    Contains token-based lint checkers for ClusterRunner.
    This checker should be registered in its package's __init__.py.
    """
    __implements__ = ITokenChecker

    name = 'clusterrunner_token_checker'
    msgs = {
        'CR001': (
            'Comment contains disallowed string "DO NOT COMMIT"',
            'clusterrunner-do-not-commit',
            'Used when a comment contains the string "DO NOT COMMIT". '
            'These are generated files that should not be committed.'),
    }

    def process_tokens(self, tokens):
        """
        Superclass override: receives a generator object containing all the tokens in the current file being linted.

        :type tokens: collections.Iterable[tokenize.TokenInfo]
        """
        for token in tokens:
            self._check_token_for_do_not_commit_string(token)

    def _check_token_for_do_not_commit_string(self, token):
        """
        Check for a "DO NOT COMMIT" string in comments. This comment is used in autogenerated files (e.g.,
        package_version.py) that should not be committed.

        :type token: tokenize.TokenInfo
        """
        if token.type == tokenize.COMMENT and 'DO NOT COMMIT' in token.string:
            line_number = token.start[0]
            self.add_message('clusterrunner-do-not-commit', line=line_number)
