# -*- coding: utf-8 -*-

"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# We'll need to interact with the OS/system to check paths,
# load environment variables, and so on.
import os


#############################################################################
#
# PATHS
#
#############################################################################

# What is the base directory of the project?
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


#############################################################################
#
# ENVIRONMENT VARIABLES
#
#############################################################################

# There should be a file called 'env.vars.manifest' in the same directory
# as this settings file. That manifest should have a number of KEY=VALUE
# declarations (one per line). That's the list of all the environment
# variables that need to be defined in order for this application to run.
# We'll parse that list and check that all the variables are set.

# If we detect that an environment variable is missing, we'll raise an error
# saying so. We'll use Django's ImproperlyConfigured for that.
from django.core.exceptions import ImproperlyConfigured

# Where is the manifest located?
SETTINGS_CWD = os.path.dirname(os.path.abspath(__file__))
ENV_VARS_MANIFEST = SETTINGS_CWD + '/env.vars.manifest'

# We'll build our dictionary of environment variables here:
ENV_VARS = {}


def split_up_key_and_value(key_value_string):
    """Split up 'key=value' into 'key' and 'value'."""
    parts = key_value_string.split('=')
    key = parts[0] if len(parts) > 0 else None
    value = parts[1] if len(parts) > 1 else None
    return (key, value)


def booleanize_if_possible(sample):
    """Boolean-ize truthy/falsey strings."""
    if sample.lower() in ['true', 'yes', 'on', 1]:
        sample = True
    elif sample.lower() in ['false', 'no', 'off', 0]:
        sample = False
    return sample


def get_env_variable(key, default=None):
    """Get an environment variable from the system."""
    result = None
    try:
        result = os.environ[key]
    except KeyError:
        if default is not None:
            result = default
        else:
            msg = "Set the {} environment variable" % (key)
            raise ImproperlyConfigured(msg)
    return booleanize_if_possible(result)

# Read each line in the manifest.
with open(ENV_VARS_MANIFEST) as f:
    lines = f.read().splitlines()
    for line in lines:

        # Ignoring empty lines and comments,
        # add the key/value pair to our dictionary.
        if line and line[0:1] != '#':
            key, value = split_up_key_and_value(line)
            ENV_VARS[key] = get_env_variable(key, value)


#############################################################################
#
# DEBUG SETTINGS
#
#############################################################################

# By default, DEBUG should be turned off (False). Only in a dev
# dev environment should it be turned on. While it is on (True),
# Django spits out detailed tracebacks when it sees errors, and
# we don't want to reveal that to the world. Note also that while
# this is True, Django remembers every SQL query it runs.
# In production, that would consume a lot of memory.
# https://docs.djangoproject.com/en/1.8/ref/settings/#debug
DEBUG = ENV_VARS['ENV_DEBUG']

INTERNAL_IPS = (
    '127.0.0.1',
    '192.168.59.106',
    '192.168.59.3',
)


#############################################################################
#
# CRYPTOGRAPHIC SIGNING
#
#############################################################################

# This is used to sign sensitive data (like cookies and sessions).
# This MUST be kept secret. If it is compromised, change it immediately.
# Users will need to logout before it takes affect, but it's worth it.
SECRET_KEY = 'bad_c0de'
if ENV_VARS['ENV_SECRET_KEY']:
    SECRET_KEY = ENV_VARS['ENV_SECRET_KEY']


#############################################################################
#
# HOSTS
#
#############################################################################

# If DEBUG=False, Django will only respond to requests that set
# their HTTP `Host` header to one of the following values (so if
# the `Host` header in the request is not set to one of these values,
# Django will respond with a `400 Bad Request`. Note, however, that
# if the USE_X_FORWARDED_HOST setting is enabled, then Django will look
# at that value first.
# See https://docs.djangoproject.com/en/1.8/ref/settings/#allowed-hosts
ALLOWED_HOSTS = [
    '*',
]

# If your Django site lives behind another server/proxy (like nginx
# or a load balancer), then that proxy may send the `Host` header
# it initially received as the `X-Forwaded-Host` header. If you want
# your Django site to use that header in preference to the `Host` header,
# then set this value to True. It defaults to False.
# WARNING: Do not set this unless you know for sure that your server/proxy
# is setting the `X-Forwarded-Host` header correctly.
# See https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-USE_X_FORWARDED_HOST
# USE_X_FORWARDED_HOST = False


#############################################################################
#
# CLICKJACKING, XSS, Etc.
#
#############################################################################

# Sets the HTTP `X-Frame-Options` header to prevent clickjacking.
# Note that django.middleware.clickjacking.XFrameOptionsMiddleware
# must be added to the MIDDLEWARE_CLASSES list.
# See https://docs.djangoproject.com/en/1.8/ref/clickjacking/.
X_FRAME_OPTIONS = 'DENY'

# Sets the HTTP `X-XSS-Protection: 1; mode=block' header so modern
# browsers who are able to try and catch malicious XSS attacks can do so.
# https://docs.djangoproject.com/en/1.8/ref/settings/#secure-browser-xss-filter
SECURE_BROWSER_XSS_FILTER = True

# Sets the HTTP `X-Content-Type-Options: nosniff` header so that
# browsers don't try to guess the Content-Type of files. If the browser
# did guess, it might guess wrong, and open a malicious file.
# https://docs.djangoproject.com/en/1.8/ref/settings/#secure-content-type-nosniff
SECURE_CONTENT_TYPE_NOSNIFF = True


#############################################################################
#
# SSL
#
#############################################################################

# Should we permanently redirect all HTTP requests to HTTPS?
# It is much more efficient to let nginx do this, rather than Django.
# https://docs.djangoproject.com/en/1.8/ref/middleware/#ssl-redirect
# SECURE_SSL_REDIRECT = True


#############################################################################
#
# Strict Transport Security
#
#############################################################################

# Set the HTTP `Strict-Transport-Security` header for a year.
# Note that django.middleware.security.SecurityMiddleware
# must be added to the MIDDLEWARE_CLASSES list.
# See https://docs.djangoproject.com/en/1.8/ref/middleware/#module-django.middleware.security
SECURE_HSTS_SECONDS = 60 # Inch this up to 31536000 (1 year) when we know it works.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True


#############################################################################
#
# CSRF
#
#############################################################################

# When an incoming request is rejected by the CSRF protection,
# which view should display the 403 page?
# See https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-CSRF_FAILURE_VIEW
# CSRF_FAILURE_VIEW = 'apps.pages.errors.csrf_failure'

# Restrict CSRF cookies to be HTTP only, and only send them over HTTPS.
# See https://docs.djangoproject.com/en/1.8/ref/csrf/#settings
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = True
if ENV_VARS['ENV_SECURE_COOKIES'] is False:
    CSRF_COOKIE_SECURE = False

# TO DO: Set this to something.
CSRF_COOKIE_DOMAIN = None


#############################################################################
#
# SESSION
#
#############################################################################

# Restrict session cookies to be read by HTTP only (not javascript),
# and only send them over HTTPS.
# https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-SESSION_COOKIE_HTTPONLY
# https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-SESSION_COOKIE_SECURE
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True
if ENV_VARS['ENV_SECURE_COOKIES'] is False:
    SESSION_COOKIE_SECURE = False


#############################################################################
#
# WSGI
#
#############################################################################

# WSGI stands for `Web Server Gateway Interface`. It specifies how a web
# server (like Apache, Gunicorn, etc) should interact with a Python
# application. In effect, this is how the web server talks to the Django
# project. So, which module should the webserver talk to?
# See https://docs.djangoproject.com/en/1.8/ref/settings/#wsgi-application
WSGI_APPLICATION = 'project.wsgi.application'


#############################################################################
#
# URLS
#
#############################################################################

# Where are all the URLs/routes?
# See https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-ROOT_URLCONF
ROOT_URLCONF = 'project.urls'


#############################################################################
#
# APPS
#
#############################################################################

# Which apps should this project use?
# See https://docs.djangoproject.com/en/1.8/ref/settings/#installed-apps
INSTALLED_APPS = (

    # Default django apps.
    'django.contrib.staticfiles',

    # Adds lots of commands to manage.py:
    'django_extensions',


    'apps.health',
)


#############################################################################
#
# MIDDLEWARE
#
#############################################################################

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)


#############################################################################
#
# TEMPLATES
#
#############################################################################

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            'apps/base/templates/base',
            'apps',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'string_if_invalid': 'INVALID EXPRESSION: %s',
        },
    },
]


#############################################################################
#
# INTERNATIONALIZATION
#
#############################################################################

# https://docs.djangoproject.com/en/1.8/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


#############################################################################
#
# ASSETS/STATIC FILES
#
#############################################################################

# For more information about Django's static files management, see
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# What URL should we prepend to assets? If you have a CDN,
# you should set that here.
# https://docs.djangoproject.com/en/1.8/ref/settings/#static-url
if ENV_VARS['ENV_CDN']:
    STATIC_URL = ENV_VARS['ENV_CDN']
else:
    STATIC_URL = '/static/'

# Where do we want to put static files? When we run the command
# `manage.py collectstatic`, Django will collect all the static files
# it can find and put them here. They can then be served from this
# location, or uploaded to a CDN, or whathave you.
# https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-STATIC_ROOT
STATIC_ROOT = 'app/dist'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "apps/webroot/static"),
)


# How should the `collectstatic` command gather the files together?
# To just copy them over to the STATIC_ROOT, use StaticFilesStorage.
# https://docs.djangoproject.com/en/1.8/ref/contrib/staticfiles/#staticfilesstorage
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'


#############################################################################
#
# LOGGING
#
#############################################################################

# 12factor methodology is just to stream logs to STDOUT, and let deployment
# runtime environments collect the stream for post-processing.
# That way the application itself doesn't know or care about where the logs
# go/end up. The deployment architecture handles that instead.
LOG_LEVEL = 'INFO'
if ENV_VARS['ENV_LOG_LEVEL']:
    LOG_LEVEL = ENV_VARS['ENV_LOG_LEVEL']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # What kinds of formatters should we use to format each log line?
    'formatters': {
        # Verbose log formatting:
        # "[03/Nov/2015 18:23:03] INFO [simple:simple.py:73] Its healthy!"
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(module)s:%(filename)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        # simple and terse verbosity:
        # "INFO Its healthy!"
        'simple': {
            'format': '%(levelname)s %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'nara': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
        'django': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
        'django.request': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
        'django.security': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
        },
    },
}
