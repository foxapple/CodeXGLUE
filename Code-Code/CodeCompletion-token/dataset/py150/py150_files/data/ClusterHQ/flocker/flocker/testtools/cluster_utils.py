# Copyright ClusterHQ Inc.  See LICENSE file for details.

"""
Utility functions for cluster lifecycle management in test env.
"""

from uuid import uuid4, UUID
from twisted.python.constants import Values, ValueConstant


class TestTypes(Values):
    """
    Supported test types.
    """
    FUNCTIONAL = ValueConstant(1)
    ACCEPTANCE = ValueConstant(2)


# A stable identifier that never changes and that unambiguously
# marks a cluster identifier as having been generated by this function (except
# for random collisions, of course, so we use as many bits for this marker as
# we can while leaving room for some randomness and the version number).
#
# Arbitrarily selected as a distinctive value when represented in base 16 (the
# common representation base for cluster ids).  48 bits fits exactly into the
# node field of a UUID.
MARKER = 0xAAAAAAAAAAAA


def make_cluster_id(test_type):
    """
    Compose cluster ``UUID`` using test type and storage provider.

    :param test_type: A constant from ``TestTypes`` indicating the intended
        type of test that will use cluster id.
    """
    tmp_uuid = uuid4()
    tagged_cluster_id = UUID(fields=(
        tmp_uuid.time_low, tmp_uuid.time_mid, tmp_uuid.time_hi_version,

        # Special magic markers to identify test clusters.

        # clock_seq_hi_variant and clock_seq_low are 8 bits. We use the first
        # of these to the store the test_type.
        test_type.value, tmp_uuid.clock_seq_low,

        # node is 48 bits so it makes a good place to put a big magic marker
        # value to identify this as a special cluster id.
        MARKER,
    ))
    return tagged_cluster_id
