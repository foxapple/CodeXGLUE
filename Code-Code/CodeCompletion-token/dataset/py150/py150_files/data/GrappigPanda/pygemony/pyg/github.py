import github3
from os import path


class GithubAPIManager(object):
    """
    Handles authorization and everything else done with the github api.
    """

    # repo_location = grappigpanda/pygemony.py
    def __init__(self, user, token, owner, repo):
        self.is_authed = False

        # Auth stuff
        self.user = user
        self.token = token
        self.gh = self.login()
        if self.gh is None:
            raise Exception("Failed to login")

        # Remote repo stuff
        if not owner:
            self.owner = self.get_owner().rstrip()
        else:
            self.owner = owner
        if not repo:
            self.repo = self.get_repo().rstrip()
        else:
            self.repo = repo
        self.curr_repo = self.gh.repository(str(self.owner), str(self.repo))
        

    def login(self):
        """
        Logs the user in.

        :rtype: gh.repository
        :return: github3.login()
        """
        try:
            return github3.login(self.user, self.token)
        except github3.models.GitHubError as e:
            print "Failed to login due to {}".format(e)
        return None

    def _save_submitted_todo(self, issue):
        """
        Writes the TODO issue information (the hashed info) to the
        `.pyg-submitted` file.

        :param list issue: A list containing info about the found TODO
        :rtype: bool
        :return: True on successful write, False if the issue exists already.
        """
        if not path.isfile('./.pyg-submitted'):
            with open('./.pyg-submitted', 'a+') as f:
                f.write("""
                This file was auto-generated by pygemony to help users keep-track of long-forgotten TODOs.
                For more information, please visit: https://github.com/GrappigPanda/pygemony
                """)
                f.write(issue[3])
                f.write('\n')
            return True

        if issue[3] in open('./.pyg-submitted').read():
            return False
        else:
            with open('./.pyg-submitted', 'ab') as f:
                f.write(issue[3])
                f.write('\n')
            return True

    def commit(self, todo_found):
        """
        Creates a github issue per TODO found. 


        :param list todo_found: A list containing information about the found
            TODO
        """
        # TODO(ian): Assign issues if () in line. (ian), for example
        for issue in todo_found:
            if self._save_submitted_todo(issue):
                self._pprint(issue)
                self.curr_repo.create_issue(title=issue[2],
                                        body=self._construct_issue_body(issue))

    def get_languages(self):
        """
        Iterates through the languages used in the project and yields the
        language.

        :rtype: generator(str)
        :return: A generator for the languages used in the project
        """
        for i in self.curr_repo.iter_languages():
            yield i

    def _get_repo_owner(self):
        """
        Gets the repo owner from the gitconfig.

        :rtype: tuple
        :return: The (repo, owner) of the repo from the git config.
        """
        # TODO(ian): Remove the magic directory!
        with open('./.git/config', 'r+') as f:
            for line in f.readlines():
                if 'url = ' in line:
                    return line.split('github.com/')[-1].split('/')

    def get_repo(self):
        """
        Reads the repo name from the git config

        :rtype: str
        :return: The repo's name
        """
        return self._get_repo_owner()[1]

    def get_owner(self):
        """
        Reads the repo owner's name from the git config

        :rtype: str
        :return: The repo owner's name
        """
        return self._get_repo_owner()[0]

    @staticmethod
    def _construct_issue_body(issue):
        """
        Constructs the issue body that is posted in the github issue.

        :rtype: str
        :return: The issue body, html formatted.
        """
        # TODO(ian): Move all @staticmethods to a seperate class
        sz = 'File Location: {}<br>Line Number: {}'.format(issue[0], issue[1])
        sz += '<br> This message was auto-generated by Pygemony: '
        sz += '<a href="http://github.com/GrappigPanda/pygemony">Github</a>'
        return sz

    def _pprint(self, issue):
        """
        Prints information to the screen about creating commits

        :param list issue: A list of information about the found TODO.
        """
        msg = "Committing to repo: {}"
        msg += "\n\tFile Name: {}:{}\n\tTodo Message:{}"
        print msg.format(self.repo, issue[0], issue[1], issue[2])
    
